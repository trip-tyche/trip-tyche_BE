name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때마다 워크플로우가 실행됩니다.

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: 리포지토리의 코드를 체크아웃하는 단계
      - name: Checkout repository
        uses: actions/checkout@v4  # 최신 버전으로 업데이트

      # Step 2: Java 17 환경을 설정합니다.
      - name: Set up JDK 17
        uses: actions/setup-java@v3  # v3는 Node.js 20과 호환됩니다. 최신 버전 유지
        with:
          java-version: '17'
          distribution: 'temurin'  # 필수: Java 배포판을 지정

      # Step 3: Gradle을 사용하여 프로젝트를 빌드합니다.
      - name: Build with Gradle
        run: ./gradlew clean build

      # Step 4: Docker Hub에 로그인하는 단계입니다.
      - name: Login to Docker Hub
        uses: docker/login-action@v2  # v2는 Node.js 20 호환, 대안이 없다면 최신 버전 유지
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # GitHub Secrets에 저장된 Docker Hub 사용자 이름 사용
          password: ${{ secrets.DOCKER_PASSWORD }}  # GitHub Secrets에 저장된 Docker Hub 비밀번호 사용

      # Step 5: Docker 이미지를 빌드하고 Docker Hub에 푸시하는 단계입니다.
      - name: Build and Push Docker Image
        run: |
          # Docker 이미지를 빌드하고
          docker build -t maristadev/feeling-memory-app:latest .
          # Docker Hub에 푸시합니다.
          docker push maristadev/feeling-memory-app:latest
        env:
          # GitHub Secrets를 통해 환경 변수 관리
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          KAKAO_OAUTH_CLIENT_ID: ${{ secrets.KAKAO_OAUTH_CLIENT_ID }}
          KAKAO_OAUTH_CLIENT_SECRET: ${{ secrets.KAKAO_OAUTH_CLIENT_SECRET }}
          GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
          GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 6: EC2에 배포하기 위해 SSH로 접속합니다.
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.3  # 최신 버전 확인
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/projects/5FeelingMemory_BE
            
            # 최신 Docker 이미지를 가져옵니다.
            docker pull maristadev/feeling-memory-app:latest
            
            # 기존의 Docker Compose 서비스를 중지합니다.
            docker-compose down
            
            # 새 이미지를 사용해 Docker Compose 서비스를 재시작합니다.

            docker-compose up -d
