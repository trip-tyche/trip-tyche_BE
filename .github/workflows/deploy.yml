name: CI/CD Pipeline

# 이 워크플로우는 main 브랜치에 푸시될 때마다 실행됩니다.
on:
  push:
    branches:
      - main

jobs:
  build:
    # GitHub에서 제공하는 최신 Ubuntu 환경에서 실행됩니다.
    runs-on: ubuntu-latest

    steps:
      # 리포지토리의 코드를 체크아웃하는 단계
      - name: Checkout repository
        uses: actions/checkout@v4.1.3

      # Java 17 환경을 설정합니다.
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle을 사용하여 프로젝트를 빌드합니다.
      - name: Build with Gradle
        run: ./gradlew clean build

      # Docker Hub에 로그인하는 단계입니다.
      # 이때 GitHub Secrets에 저장된 Docker Hub 자격 증명을 사용합니다.
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # 수정: Docker Hub 사용자 이름을 GitHub Secrets에 저장해야 합니다.
          password: ${{ secrets.DOCKER_PASSWORD }}  # 수정: Docker Hub 비밀번호를 GitHub Secrets에 저장해야 합니다.

      # Docker 이미지를 빌드하고 Docker Hub에 푸시하는 단계입니다.
      - name: Build and Push Docker Image
        run: |
          # 애플리케이션 Docker 이미지를 빌드하고
          docker build -t maristadev/feeling-memory-app:latest .
          # Docker Hub에 푸시합니다.
          docker push maristadev/feeling-memory-app:latest
        env:
          # 여기서 환경 변수들은 GitHub Secrets를 사용하여 관리됩니다.
          SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
          KAKAO_OAUTH_CLIENT_ID: ${{ secrets.KAKAO_OAUTH_CLIENT_ID }}
          KAKAO_OAUTH_CLIENT_SECRET: ${{ secrets.KAKAO_OAUTH_CLIENT_SECRET }}
          GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
          GOOGLE_OAUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}

  deploy:
    # 배포 작업은 빌드 작업이 완료된 후에 실행됩니다.
    runs-on: ubuntu-latest
    needs: build

    steps:
      # EC2에 배포하기 위해 SSH로 접속합니다.
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 최신 Docker 이미지를 가져옵니다.
            docker pull maristadev/feeling-memory-app:latest
            
            # 기존의 Docker Compose 서비스를 중지합니다.
            docker-compose down
            
            # Docker Compose 파일을 업데이트하여 새 이미지를 사용해 다시 시작합니다.
            docker-compose up -d
