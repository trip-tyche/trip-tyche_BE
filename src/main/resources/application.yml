spring:
  profiles:
    group:
      local: local
      prod: prod
      staging: staging

---
spring:
  config:
    activate:
      on-profile: local
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: share-consumer-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/feeling_memory
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
  data:
    redis:
      host: localhost
      port: 6379
      password:
      timeout: 1000
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_OAUTH_CLIENT_ID}
            client-secret: ${KAKAO_OAUTH_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/kakao"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope: profile_nickname, account_email
            client-name: Kakao
          google:
            client-id: ${GOOGLE_OAUTH_CLIENT_ID}
            client-secret: ${GOOGLE_OAUTH_CLIENT_SECRET}
            redirect-uri: "{baseUrl}/login/oauth2/code/google"
            authorization-grant-type: authorization_code
            scope: profile, email
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
  cloud:
    aws:
      s3:
        bucketName: five-feeling-memory
      credentials:
        accessKey: ${AWS_ACCESS_KEY}
        secretKey: ${AWS_SECRET_KEY}
      region:
        static: ap-northeast-2
      stack:
        auto: false
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
  #      enabled: true
  redirect:
    url: http://localhost:8080/auth/redirect
  management:
    endpoints:
      web:
        exposure:
          include: "*"
    endpoint:
      prometheus:
        enabled: true
    metrics:
      export:
        prometheus:
          enabled: true
      server:
        base-path: /actuator

logging:
  level:
    org.springframework.security: DEBUG
    org.hibernate:
      sql: debug
      type:
        descriptor:
          sql:
            BasicBinder: trace


---
spring:
  config:
    activate:
      on-profile: prod
  kafka:
    bootstrap-servers: kafka:29092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: share-consumer-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://feeling-memory-database:3306/feeling_memory
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
  data:
    redis:
      host: redis
      port: 6379
      timeout: 1000
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_OAUTH_CLIENT_ID}
            client-secret: ${KAKAO_OAUTH_CLIENT_SECRET}
            redirect-uri: "${KAKAO_REDIRECT_URI}"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope: profile_nickname, account_email
            client-name: Kakao
          google:
            client-id: ${GOOGLE_OAUTH_CLIENT_ID}
            client-secret: ${GOOGLE_OAUTH_CLIENT_SECRET}
            redirect-uri: "${GOOGLE_REDIRECT_URI}"
            authorization-grant-type: authorization_code
            scope: profile, email
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
  cloud:
    aws:
      s3:
        bucketName: five-feeling-memory
      credentials:
        accessKey: ${AWS_ACCESS_KEY}
        secretKey: ${AWS_SECRET_KEY}
      region:
        static: ap-northeast-2
      stack:
        auto: false
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
  redirect:
    url: https://triptyche.world/login/redirect

  management:
    endpoints:
      web:
        exposure:
          include: "*"
    endpoint:
      prometheus:
        enabled: true
    metrics:
      export:
        prometheus:
          enabled: true

logging:
  level:
    org.springframework.security: DEBUG
    com.fivefeeling.memory.global.oauth: DEBUG
    com.fivefeeling.memory.global.s3: info
    org.apache.kafka: TRACE
  #    software.amazon.awssdk: DEBUG
  file:
    path: /var/log/spring-boot/
    max-history: 2


---
spring:
  config:
    activate:
      on-profile: staging
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: share-consumer-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://staging-trip-tyche-database:3306/trip_tyche
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
  data:
    redis:
      host: redis-staging
      port: 6379
      timeout: 1000
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_OAUTH_CLIENT_ID}
            client-secret: ${KAKAO_OAUTH_CLIENT_SECRET}
            redirect-uri: "${KAKAO_REDIRECT_URI}"
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope: profile_nickname, account_email
            client-name: Kakao
          google:
            client-id: ${GOOGLE_OAUTH_CLIENT_ID}
            client-secret: ${GOOGLE_OAUTH_CLIENT_SECRET}
            redirect-uri: "${STAGING_GOOGLE_REDIRECT_URI}"
            authorization-grant-type: authorization_code
            scope: profile, email
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
  cloud:
    aws:
      s3:
        bucketName: staging-trip-tyche
      credentials:
        accessKey: ${STAGING_AWS_ACCESS_KEY}
        secretKey: ${STAGING_AWS_SECRET_KEY}
      region:
        static: ap-northeast-2
      stack:
        auto: false
  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB
  redirect:
    url: http://localhost:3000/login/redirect
  management:
    endpoints:
      web:
        exposure:
          include: "*"
    endpoint:
      prometheus:
        enabled: true
    metrics:
      export:
        prometheus:
          enabled: true
logging:
  level:
    org.springframework.security: DEBUG
    com.fivefeeling.memory.global.oauth: DEBUG
    com.fivefeeling.memory.global.s3: DEBUG
    software.amazon.awssdk: DEBUG
    org.hibernate:
      sql: debug
      type:
        descriptor:
          sql:
            BasicBinder: trace


  file:
    path: /var/log/spring-boot/
    max-history: 2
